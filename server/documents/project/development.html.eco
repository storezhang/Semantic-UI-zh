---
layout      : 'default'
css         : 'guide'

title       : '本地文档服务器'
description : '建立本地文档开服务器指南。'
type        : 'Semantic Project'
---
<script src="/javascript/intro.js"></script>

<%- @partial('header') %>
<div class="main container">
    <div class="peek">
        <div class="ui vertical pointing secondary menu">
            <a class="active item">安装依赖</a>
            <a class="item">修复Bug</a>
        </div>
    </div>

    <h2 class="ui dividing header">安装依赖</h2>

    <p>可以很方便的建立本地的文档服务器，如果你的计算机没有联网或者网速过慢，你可以在你的计算机上创建出一套本地的文档服务器环境。</p>

    <h3 class="ui header">1.安装NodeJS</h3>
    <p>Semantic UI的文档是用DocPad编写的，DocPad是需要NodeJS才可以运行的哦。</p>

    <div class="ui warning message">安装前请确定你的npm（NodeJS的包管理器-NodeJS Package Managment）不需要管理员权限（在Linux/Unix环境下是不需要sudo来执行npm命令的意思），如果需要管理员权限的话，在安装过程中有可能会出现权限问题。</div>

    <ul class="ui list">
        <li><a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager">通过管管理安装NodeJS</a></li>
        <li><a href="https://gist.github.com/isaacs/579814">不需要管理员权限安装NodeJS</a></li>
    </ul>

    <h3 class="ui header">2.获得Semantic UI的代码</h3>

    <iframe src="http://ghbtns.com/github-btn.html?user=jlukic&repo=semantic=ui&type=fork&count=true&size=large"
            allowtransparency="true" frameborder="0" scrolling="0" width="90" height="30"></iframe>

    <h3 class="ui header">3.安装依赖</h3>
    <p>执行update命令会安装项目所需要的所有依赖，所有的依赖都存放在<code>package.json</code>文件中，如果你有兴趣，可以打开该文件看看。</p>

    <div class="code" data-title="Installing dependencies" data-type="terminal">
        npm update
    </div>


    <h3 class="ui header">4.启动文档服务器</h3>

    <div class="code" data-title="Starting server locally" data-type="terminal">
        docpad run
    </div>

    <p>上面的命令可以启动一个服务器，该服务器的内容就是和semantic-ui.com的内容一模一样，你可以在地址栏输入<code>http://localhost:9778</code>来访问。</p>

    <h2 class="ui dividing header">Fixing Bugs</h2>

    <h3 class="ui header">Watch Script</h3>

    <p>If you are working on fixing a UI component that is part of Semantic, your best bet is to work actively on the file in <code>/src/{type}/{elementname}/</code> while running a watch script from grunt. This will rebuild the docs after you make changes, so you can see if you have corrected the issue you are fixing.</p>

    <p>To see exactly what this is doing you can check out our <a href="https://github.com/jlukic/Semantic-UI/blob/master/Gruntfile.js">commented gruntfile</a></p>

    <div class="code" data-title="Watching Changes" data-type="terminal">
        grunt
    </div>

    <p>The watch task is the default grunt task for Semantic, so you can start it quite simply.</p>

    <h3 class="ui header">Running Tests</h3>
    <p>Tests will automatically run with <code>grunt watch</code> if you have started karma</p>

    <div class="code" data-title="Execute tests while developing" data-type="terminal">
        karma start
        grunt watch
    </div>

    <p>You can also run the test suite manually</p>
    <div class="code" data-title="Execute tests while developing" data-type="terminal">
        npm test
        // or
        grunt build
        // or
        karma run
    </div>

    <h3 class="ui header">Packaging Elements</h3>
    <p>For convenience there is also a separate grunt command for building minified, packaged, and compressed versions of the library.</p>

    <div class="code" data-title="Building Release Files" data-type="terminal">
        grunt build
    </div>


    <h3 class="ui header"></h3>

    <div class="ui divider"></div>
    <a class="ui large right labeled teal icon button" href="/introduction.html">
        Next: Library Introduction
        <i class="right arrow icon"></i>
    </a>
</div>
